@{
    Layout = "_BackEndLayout";
    ViewData["Title"] = "Map";
}
@section Header
{
    <!-- Custom styles for this page -->
    <link href="~/lib/leafletjs/leaflet.css" rel="stylesheet" />
    <style>
        .location-popup {
            max-width: 300px;
        }
        .location-popup h4 {
            margin: 0 0 10px 0;
            color: #003366;
            font-size: 16px;
        }
        .location-popup p {
            margin: 5px 0;
            font-size: 14px;
        }
        .location-popup .type-badge {
            display: inline-block;
            padding: 2px 8px;
            background-color: #e8f4f8;
            color: #003366;
            border-radius: 12px;
            font-size: 12px;
            margin-bottom: 8px;
        }
        .location-popup .actions {
            margin-top: 10px;
            display: flex;
            gap: 10px;
        }
        .location-popup .btn-sm {
            padding: 2px 8px;
            font-size: 12px;
        }
    </style>
}

<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Resources Map</h1>
    <div>
        <a href="/Admin/Locations" class="btn btn-info btn-icon-split shadow mr-2">
            <span class="icon text-white-50">
                <i class="fas fa-table"></i>
            </span>
            <span class="text">List View</span>
        </a>
        <button class="btn btn-primary btn-icon-split shadow" type="button" onclick="window.location.href='/Admin/Locations'">
            <span class="icon text-white-50">
                <i class="fas fa-map-marker-alt"></i>
            </span>
            <span class="text">New Location</span>
        </button>
    </div>
</div>

<!-- Map Card -->
<div class="card shadow mb-4">
    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h6 class="m-0 font-weight-bold text-primary">Resource Locations</h6>
        <div class="dropdown no-arrow">
            <a class="dropdown-toggle" href="#" role="button" id="filterDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="fas fa-filter fa-sm fa-fw text-gray-400"></i>
            </a>
            <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="filterDropdown">
                <div class="dropdown-header">Filter By Type:</div>
                <a class="dropdown-item filter-type" href="#" data-type="all">All Locations</a>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item filter-type" href="#" data-type="Hospital">Hospitals</a>
                <a class="dropdown-item filter-type" href="#" data-type="Supply Store">Supply Stores</a>
                <a class="dropdown-item filter-type" href="#" data-type="Evacuation Site">Evacuation Sites</a>
                <a class="dropdown-item filter-type" href="#" data-type="Government Centers">Government Centers</a>
                <a class="dropdown-item filter-type" href="#" data-type="Relief Warehouse">Relief Warehouses</a>
                <a class="dropdown-item filter-type" href="#" data-type="Water Refill Station">Water Stations</a>
                <a class="dropdown-item filter-type" href="#" data-type="Police">Police Stations</a>
                <a class="dropdown-item filter-type" href="#" data-type="Fire">Fire Stations</a>
                <a class="dropdown-item filter-type" href="#" data-type="Shelter">Shelters</a>

                <a class="dropdown-item filter-type" href="#" data-type="Others">Danger</a>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div id="mapView" style="width:100%;height:70vh;">
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/leafletjs/leaflet.js"></script>
    <script>
        let map;
        let markers = [];
        let circles = [];
        let allLocations = [];
        
        // Color mapping for different location types
        const locationColors = {
            'Hospital': '#ff0000',           // Red
            'Supply Store': '#ffa500',       // Orange
            'Evacuation Site': '#008000',    // Green
            'Government Centers': '#0000ff',  // Blue
            'Relief Warehouse': '#800080',    // Purple
            'Water Refill Station': '#00ffff', // Cyan
            'Police': '#000080',             // Navy
            'Fire': '#ff4500',              // OrangeRed
            'Shelter': '#006400'             // DarkGreen
        };

        function createColoredIcon(color) {
            return L.divIcon({
                className: 'custom-div-icon',
                html: `<div style="background-color: ${color}; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white; box-shadow: 0 0 3px rgba(0,0,0,0.4);"></div>`,
                iconSize: [12, 12],
                iconAnchor: [6, 6]
            });
        }
        
        function createCustomPopup(location) {
            return `
                <div class="location-popup">
                    <h4>${location.Name}</h4>
                    <span class="type-badge">${location.LocationType}</span>
                    <p><i class="fas fa-map-marker-alt mr-2"></i>${location.Address}</p>
                    <p><i class="fas fa-info-circle mr-2"></i>${location.Description || 'No description available'}</p>
                    <div class="actions">
                        <button class="btn btn-primary btn-sm" onclick="editLocation(${location.ID})">
                            <i class="fas fa-edit mr-1"></i>Edit
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="deleteLocation(${location.ID})">
                            <i class="fas fa-trash mr-1"></i>Delete
                        </button>
                    </div>
                </div>`;
        }

        function initializeMap() {
            // Default to Manila coordinates
            const defaultPosition = [14.5995, 120.9842];

            // Initialize the map
            map = L.map('mapView').setView(defaultPosition, 13);

            // Add the OpenStreetMap tiles
            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            // Try to get user's location
            if ("geolocation" in navigator) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    map.setView([position.coords.latitude, position.coords.longitude], 13);
                });
            }

            // Load all locations
            loadLocations();
        }

        function loadLocations(filterType = 'all') {
            $.ajax({
                url: '/Resources/GetAllLocations',
                method: 'GET',
                success: function(locations) {
                    allLocations = locations;
                    updateMarkers(filterType);
                },
                error: function(err) {
                    console.error('Error loading locations:', err);
                    alert('Error loading locations!');
                }
            });
        }

        function updateMarkers(filterType) {
            // Clear existing markers
            markers.forEach(marker => map.removeLayer(marker));
            markers = [];

            // Clear existing circles
            circles.forEach(circle => map.removeLayer(circle));
            circles = [];

            // Filter locations if needed
            const locationsToShow = filterType === 'all' 
                ? allLocations 
                : allLocations.filter(l => l.LocationType === filterType);

            // Add markers for each location
            locationsToShow.forEach(location => {
                if (location.MapCoordinates) {
                    const [lat, lng] = location.MapCoordinates.split(',');
                    const markerColor = locationColors[location.LocationType] || '#808080';
                    const marker = L.marker([parseFloat(lat), parseFloat(lng)], {
                        icon: createColoredIcon(markerColor)
                    }).bindPopup(createCustomPopup(location));
                    marker.addTo(map);
                    markers.push(marker);

                    // Add radius for Danger pins
                    if (location.LocationType === "Others") {
                        const dangerRadius = 300; // meters, adjust as needed
                        const circle = L.circle([parseFloat(lat), parseFloat(lng)], {
                            color: '#ff0000',
                            fillColor: '#f03',
                            fillOpacity: 0.2,
                            radius: dangerRadius
                        }).addTo(map);
                        circles.push(circle);
                    }
                }
            });

            // Adjust map view to show all markers if there are any
            if (markers.length > 0) {
                const group = new L.featureGroup(markers.concat(circles));
                map.fitBounds(group.getBounds().pad(0.1));
            }
        }

        function editLocation(id) {
            window.location.href = `/Admin/Locations#${id}`;
        }

        function deleteLocation(id) {
            if(confirm('Do you want to delete this location?')) {
                $.ajax({
                    url: '/Resources/DeleteLocation?ID=' + id,
                    method: 'GET',
                    success: function(res) {
                        if(res == 1) {
                            loadLocations(); // Reload markers
                            alert('Location deleted successfully!');
                        }
                    },
                    error: function(err) {
                        alert('Error deleting location!');
                    }
                });
            }
        }

        $(document).ready(function() {
            initializeMap();

            // Handle filter clicks
            $('.filter-type').on('click', function(e) {
                e.preventDefault();
                const filterType = $(this).data('type');
                updateMarkers(filterType);
            });
        });
    </script>
}